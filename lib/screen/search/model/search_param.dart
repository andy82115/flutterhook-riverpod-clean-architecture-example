// This file is "main.dart"
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:flutter/foundation.dart';

// required: associates our `main.dart` with the code generated by Freezed
part 'search_param.freezed.dart';

@freezed
class SearchParam with _$SearchParam {
  const factory SearchParam({
    @Default(QueryFilter()) QueryFilter queryFilter,
    @Default(SearchSort.updated) SearchSort sort,
    @Default(SearchOrder.asc) SearchOrder order,
    @Default(15) int perPage,
    @Default(1) int page,
  }) = _SearchParam;
}

@freezed
class QueryFilter with _$QueryFilter {
  const factory QueryFilter({
    @Default('') String keyword,
    @Default(InWhere.all) InWhere inWhere,
    @Default(0) int followers,
    @Default(0) int forks,
    @Default(0) int stars,
    @Default('') String language,
  }) = _QueryFilter;
}

// Define the extension for QueryFilter
extension QueryFilterExtensions on QueryFilter {
  String combineQueryString() {
    final queryParts = <String>[];

    if (keyword.isNotEmpty) queryParts.add(keyword);
    if (inWhere != InWhere.all) queryParts.add('in:${inWhere.name}');
    if (followers > 0) queryParts.add('followers:>=$followers');
    if (forks > 0) queryParts.add('forks:>=$forks');
    if (stars > 0) queryParts.add('stars:>=$stars');
    if (language.isNotEmpty) queryParts.add('language:$language');

    return queryParts.join('+');
  }
}

enum SearchOrder {
  desc,
  asc,
}

enum SearchSort {
  stars,
  forks,
  updated,
}

enum InWhere {
  all,
  name,
  description,
  topics,
  readme;

  static List<String> getStringList() {
    return InWhere.values.map((value) => value.name).toList();
  }
}
